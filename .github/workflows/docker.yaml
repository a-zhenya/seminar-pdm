name: Create docker image
on:
  workflow_run:
    workflows: ["Build package"]
    branches: [master]
    types:
      - completed

jobs:
  docker:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
    - name: Check out
      uses: actions/checkout@v4

    - name: Setup PDM
      uses: pdm-project/setup-pdm@v4
      with:
        python-version: 3.9
        cache: true

    - name: Download artifact (built package)
      uses: actions/github-script@v6
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "myproject"
          })[0];
          let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
          });
          let fs = require('fs');
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/myproject.zip`, Buffer.from(download.data));

    - name: Unzip artifact
      run: mkdir -p dist && unzip -jo -d dist myproject.zip '*.whl'

    - name: Install the package
      run: pip install dist/*.whl

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Extract repository name
      run: |
        echo "REPO_BASENAME=$(echo $GITHUB_REPOSITORY | cut -d/ -f2)" >> $GITHUB_ENV
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_BASENAME }}

    - name: Notify the user about the new image
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        format: markdown
        message: |
          Docker image `${{ secrets.DOCKER_USERNAME }}/${{ env.REPO_BASENAME }}` was built and pushed to Docker Hub
          Commit to repository `${{ github.repository }}` by `${{ github.actor }}`
          See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
